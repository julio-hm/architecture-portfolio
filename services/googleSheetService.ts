import type { Project } from '../types';
import Papa from 'papaparse';

// This is the direct link generated by Google Sheets' "Publish to the web" feature.
// It is more reliable for public fetching than constructing a URL from the sheet ID.
const GOOGLE_SHEET_CSV_URL = `https://docs.google.com/spreadsheets/d/e/2PACX-1vQw6n9Xx-C1SftTAhh10hanpBqwwbs4zmax6vpM34DdNuGPKOpiV1hEP7I8jscNa6vSmtYaWYQTK-iJ/pub?gid=1876414831&single=true&output=csv`;

export const fetchProjects = async (): Promise<Project[]> => {
  try {
    // Using 'no-cache' to prevent the browser from serving a stale/failed request from its cache.
    const response = await fetch(GOOGLE_SHEET_CSV_URL, { cache: 'no-cache' });
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error(`Spreadsheet not found. Please check the 'Publish to the web' URL.`);
      }
      throw new Error(`Network error fetching sheet: ${response.status} ${response.statusText}. Ensure the sheet is 'Published to the web'.`);
    }
    const csvText = await response.text();

    return new Promise((resolve, reject) => {
      Papa.parse(csvText, {
        header: true, // Now using header names instead of column index
        skipEmptyLines: true,
        complete: (results: Papa.ParseResult<any>) => {
          if (results.errors.length) {
            console.error("Errors while parsing CSV:", results.errors);
            const firstError = results.errors[0];
            reject(new Error(`Parsing error on row ${firstError.row}: ${firstError.message}. Check your CSV column headers.`));
            return;
          }

          // Map data by header name
          const projects: Project[] = results.data.map((row: any) => {
            const status = row.estado || 'Completed'; // Use 'estado' from sheet
            const completionPercentage = (status.toLowerCase() === 'terminado' || status.toLowerCase() === 'completed')
                ? 100
                : (Number(row['Porcentaje de finalización']) || 0); // Use 'Porcentaje de finalización'
            
            const areaDistribution = (row.areaDistribución || '').split(',').map((item: string) => {
                const [name, value] = item.split(':');
                return { name, value: Number(value) };
            }).filter((item: any) => item.name && !isNaN(item.value));

            return {
                id: row.Id, // Use 'Id' from sheet
                projectName: row['nombre del proyecto'], // Use 'nombre del proyecto' from sheet
                shortDescription: row['descripción corta'] || '',
                longDescription: row['descripción larga'] || 'No description available.',
                mainImage: row['Imagen principal'] || 'https://picsum.photos/seed/default/800/600',
                galleryImages: (row.galeríaImágenes || '').split(',').map((url: string) => url.trim()).filter(url => url),
                location: row.ubicación || 'Unknown',
                year: row.año || 'N/A',
                category: row.categoría || 'Uncategorized',
                client: row.cliente || 'Confidential',
                status: status,
                architects: row.arquitectos || 'Not listed',
                area: Number(row.área) || 0,
                awards: row.premios || 'None',
                completionPercentage: completionPercentage,
                recamaras: Number(row.recamaras) || 0,
                banos: Number(row.baños) || 0,
                cocina: Number(row.cocina) || 0,
                estacionamiento: Number(row.estacionamiento) || 0,
                areaDistribution: areaDistribution,
                costPerSqMeter: row.costPerSqMeter || undefined,
                executionTime: row.executionTime || undefined,
            };
          }).filter((p: Project) => p.id && p.projectName);

          if (projects.length === 0) {
            if (results.data.length > 0) { // Changed from > 1 because header:true means results.data will not include header
                reject(new Error("Parsing completed, but no valid project data was found. Please check that your sheet has data in the 'Id' and 'nombre del proyecto' columns."));
            } else {
                reject(new Error("No projects found. Your Google Sheet might be empty or not published correctly."));
            }
            return;
          }
          
          resolve(projects);
        },
        error: (error: Error) => {
          console.error('Critical PapaParse error:', error);
          reject(new Error(`Failed to parse project data: ${error.message}`));
        },
      });
    });
  } catch (error) {
     console.error('Error fetching or parsing project data:', error);
    throw error;
  }
};