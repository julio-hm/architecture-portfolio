import type { Project } from '../types';
import Papa from 'papaparse';

// This is the direct link generated by Google Sheets' "Publish to the web" feature.
// It is more reliable for public fetching than constructing a URL from the sheet ID.
const GOOGLE_SHEET_CSV_URL = `https://docs.google.com/spreadsheets/d/e/2PACX-1vQw6n9Xx-C1SftTAhh10hanpBqwwbs4zmax6vpM34DdNuGPKOpiV1hEP7I8jscNa6vSmtYaWYQTK-iJ/pub?gid=1876414831&single=true&output=csv`;

export const fetchProjects = async (): Promise<Project[]> => {
  try {
    // Using 'no-cache' to prevent the browser from serving a stale/failed request from its cache.
    const response = await fetch(GOOGLE_SHEET_CSV_URL, { cache: 'no-cache' });
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error(`Spreadsheet not found. Please check the 'Publish to the web' URL.`);
      }
      throw new Error(`Network error fetching sheet: ${response.status} ${response.statusText}. Ensure the sheet is 'Published to the web'.`);
    }
    const csvText = await response.text();

    return new Promise((resolve, reject) => {
      Papa.parse(csvText, {
        header: false, // We will use column index to be more robust
        skipEmptyLines: true,
        complete: (results: Papa.ParseResult<any>) => {
          if (results.errors.length) {
            console.error("Errors while parsing CSV:", results.errors);
            const firstError = results.errors[0];
            reject(new Error(`Parsing error on row ${firstError.row}: ${firstError.message}. Check your CSV column headers.`));
            return;
          }

          // Skip header row (index 0) and map the rest by column index
          const projects: Project[] = results.data.slice(1).map((row: any) => {
            const status = row[10] || 'Completed'; // Column K
            const completionPercentage = (status.toLowerCase() === 'terminado' || status.toLowerCase() === 'completed')
                ? 100
                : (Number(row[14]) || 0); // Column O
            
            const areaDistribution = (row[19] || '').split(',').map((item: string) => { // Column T
                const [name, value] = item.split(':');
                return { name, value: Number(value) };
            }).filter((item: any) => item.name && !isNaN(item.value));

            return {
                id: row[0], // Column A
                projectName: row[1], // Column B
                shortDescription: row[2] || '', // Column C
                longDescription: row[3] || 'No description available.', // Column D
                mainImage: row[4] || 'https://picsum.photos/seed/default/800/600', // Column E
                galleryImages: (row[5] || '').split(',').map((url: string) => url.trim()).filter(url => url), // Column F
                location: row[6] || 'Unknown', // Column G
                year: row[7] || 'N/A', // Column H
                category: row[8] || 'Uncategorized', // Column I
                client: row[9] || 'Confidential', // Column J
                status: status,
                architects: row[11] || 'Not listed', // Column L
                area: Number(row[12]) || 0, // Column M
                awards: row[13] || 'None', // Column N
                completionPercentage: completionPercentage,
                recamaras: Number(row[15]) || 0, // Column P
                banos: Number(row[16]) || 0, // Column Q
                cocina: Number(row[17]) || 0, // Column R
                estacionamiento: Number(row[18]) || 0, // Column S
                areaDistribution: areaDistribution,
                costPerSqMeter: row[20] || undefined, // Column U
                executionTime: row[21] || undefined, // Column V
            };
          }).filter((p: Project) => p.id && p.projectName);

          if (projects.length === 0) {
            if (results.data.length > 1) {
                reject(new Error("Parsing completed, but no valid project data was found. Please check that your sheet has data in the first two columns (ID and Project Name) after the header row."));
            } else {
                reject(new Error("No projects found. Your Google Sheet might be empty or not published correctly."));
            }
            return;
          }
          
          resolve(projects);
        },
        error: (error: Error) => {
          console.error('Critical PapaParse error:', error);
          reject(new Error(`Failed to parse project data: ${error.message}`));
        },
      });
    });
  } catch (error) {
     console.error('Error fetching or parsing project data:', error);
    throw error;
  }
};